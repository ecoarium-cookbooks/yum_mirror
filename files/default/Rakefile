require 'json'
require 'mixlib/shellout'
require 'net/smtp'
require 'fileutils'
require 'pp'

#http://docs.fedoraproject.org/en-US/Fedora/14/html/Software_Management_Guide/ch08s04.html
#http://docs.fedoraproject.org/en-US/Fedora/14/html/Software_Management_Guide/ch08s07.html
#http://docs.fedoraproject.org/en-US/Fedora/14/html/Software_Management_Guide/Gesti%C3%B3n_avanzada_de_repositorios_yum.html

def shell_command(command, args={})
  args = {
    :timeout => 36000,
    :live_stdout => $stdout,
    :live_stderr => $stderr
  }.merge(args)

    puts "executing command: [#{command}]\nwith args:\n#{args.pretty_inspect}"

    cmd = Mixlib::ShellOut.new(command, args)
    cmd.run_command
    cmd
end

def shell_command!(command, args={})
  cmd = shell_command(command, args)
  cmd.error!
  cmd
end

def shell_output!(command, args={})
  args = {
    live_stream: nil
  }.merge(args)

  result = shell_command!(command, args)
  result.stdout
end

def list_repos(status)
  skip = true
  repo_list = []
  shell_output!("yum repolist #{status}").split("\n").each { |line|
    if skip
      skip = line.start_with?('repo id') == false
      next
    end
    repo_list << line.split("\s")[0]
  }
  repo_list
end

$all_repos = list_repos(:enabled)
$disabled_repos = list_repos(:disabled)
$all_repos += $disabled_repos

# define :mirror_#{name} for each name
$config = JSON.parse(IO.read('/var/lib/mirror/config.json'), symbolize_names: true)
$config[:repositories].each{ |repo|
  name = repo[:name]
  repo_context = repo[:repo_context]
  repo_path = File.expand_path(repo_context, '/var/lib/mirror/repo')

  multitask "create_repo_directory_#{repo_context}".to_sym do
    FileUtils.mkdir_p repo_path unless File.exist?(repo_path)
  end

  multitask "createrepo_#{repo_context}".to_sym => "create_repo_directory_#{repo_context}".to_sym

  if repo[:sync]
    raise "repo #{name} was not found as a configured repo:
  #{$all_repos.join("\n  ")}
" unless $all_repos.include?(name)

    multitask "mirror_#{name}".to_sym do
      begin
        if $disabled_repos.include?(name)
          shell_command!("yum-config-manager --enable #{name}")
        end
        shell_command!("reposync -l -r #{name} -p #{repo_path}")
      ensure
        if $disabled_repos.include?(name)
          shell_command!("yum-config-manager --disable #{name}")
        end
      end
    end

    multitask "createrepo_#{repo_context}".to_sym => "mirror_#{name}".to_sym
  end

  multitask "createrepo_#{repo_context}".to_sym do
    shell_command!("createrepo #{repo_path}")
    shell_command!("chown -R apache:apache #{repo_path}")
  end

  multitask :mirror => "createrepo_#{repo_context}".to_sym
}

desc "Sync all mirrors"
multitask :mirror

task :default => [:mirror]
